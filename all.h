
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__all_h__PROXY_MARSHAL_H
#define __dbusxx__all_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace bluez {

class Adapter_proxy
: public ::DBus::InterfaceProxy
{
public:

    Adapter_proxy()
    : ::DBus::InterfaceProxy("org.bluez.Adapter")
    {
        connect_signal(Adapter_proxy, DeviceCreated, _DeviceCreated_stub);
        connect_signal(Adapter_proxy, DeviceRemoved, _DeviceRemoved_stub);
        connect_signal(Adapter_proxy, DeviceFound, _DeviceFound_stub);
        connect_signal(Adapter_proxy, PropertyChanged, _PropertyChanged_stub);
        connect_signal(Adapter_proxy, DeviceDisappeared, _DeviceDisappeared_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::map< std::string, ::DBus::Variant > GetProperties()
    {
        ::DBus::CallMessage call;
        call.member("GetProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    void SetProperty(const std::string& argin0, const ::DBus::Variant& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("SetProperty");
        ::DBus::Message ret = invoke_method (call);
    }

    void RequestMode(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("RequestMode");
        ::DBus::Message ret = invoke_method (call);
    }

    void ReleaseMode()
    {
        ::DBus::CallMessage call;
        call.member("ReleaseMode");
        ::DBus::Message ret = invoke_method (call);
    }

    void RequestSession()
    {
        ::DBus::CallMessage call;
        call.member("RequestSession");
        ::DBus::Message ret = invoke_method (call);
    }

    void ReleaseSession()
    {
        ::DBus::CallMessage call;
        call.member("ReleaseSession");
        ::DBus::Message ret = invoke_method (call);
    }

    void StartDiscovery()
    {
        ::DBus::CallMessage call;
        call.member("StartDiscovery");
        ::DBus::Message ret = invoke_method (call);
    }

    void StopDiscovery()
    {
        ::DBus::CallMessage call;
        call.member("StopDiscovery");
        ::DBus::Message ret = invoke_method (call);
    }

    std::vector< ::DBus::Path > ListDevices()
    {
        ::DBus::CallMessage call;
        call.member("ListDevices");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Path > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path CreateDevice(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("CreateDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path CreatePairedDevice(const std::string& argin0, const ::DBus::Path& argin1, const std::string& argin2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        wi << argin2;
        call.member("CreatePairedDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    void CancelDeviceCreation(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("CancelDeviceCreation");
        ::DBus::Message ret = invoke_method (call);
    }

    void RemoveDevice(const ::DBus::Path& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("RemoveDevice");
        ::DBus::Message ret = invoke_method (call);
    }

    ::DBus::Path FindDevice(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("FindDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    void RegisterAgent(const ::DBus::Path& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("RegisterAgent");
        ::DBus::Message ret = invoke_method (call);
    }

    void UnregisterAgent(const ::DBus::Path& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("UnregisterAgent");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void DeviceCreated(const ::DBus::Path& argin0) = 0;
    virtual void DeviceRemoved(const ::DBus::Path& argin0) = 0;
    virtual void DeviceFound(const std::string& argin0, const std::map< std::string, ::DBus::Variant >& argin1) = 0;
    virtual void PropertyChanged(const std::string& argin0, const ::DBus::Variant& argin1) = 0;
    virtual void DeviceDisappeared(const std::string& argin0) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DeviceCreated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path arg0;
        ri >> arg0;
        DeviceCreated(arg0);
    }
    void _DeviceRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path arg0;
        ri >> arg0;
        DeviceRemoved(arg0);
    }
    void _DeviceFound_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        std::map< std::string, ::DBus::Variant > arg1;
        ri >> arg1;
        DeviceFound(arg0, arg1);
    }
    void _PropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ::DBus::Variant arg1;
        ri >> arg1;
        PropertyChanged(arg0, arg1);
    }
    void _DeviceDisappeared_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        DeviceDisappeared(arg0);
    }
};

} } 
namespace org {
namespace bluez {

class Service_proxy
: public ::DBus::InterfaceProxy
{
public:

    Service_proxy()
    : ::DBus::InterfaceProxy("org.bluez.Service")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t AddRecord(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("AddRecord");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void UpdateRecord(const uint32_t& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("UpdateRecord");
        ::DBus::Message ret = invoke_method (call);
    }

    void RemoveRecord(const uint32_t& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("RemoveRecord");
        ::DBus::Message ret = invoke_method (call);
    }

    void RequestAuthorization(const std::string& argin0, const uint32_t& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("RequestAuthorization");
        ::DBus::Message ret = invoke_method (call);
    }

    void CancelAuthorization()
    {
        ::DBus::CallMessage call;
        call.member("CancelAuthorization");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
namespace org {
namespace bluez {

class SerialProxyManager_proxy
: public ::DBus::InterfaceProxy
{
public:

    SerialProxyManager_proxy()
    : ::DBus::InterfaceProxy("org.bluez.SerialProxyManager")
    {
        connect_signal(SerialProxyManager_proxy, ProxyCreated, _ProxyCreated_stub);
        connect_signal(SerialProxyManager_proxy, ProxyRemoved, _ProxyRemoved_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string CreateProxy(const std::string& argin0, const std::string& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("CreateProxy");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > ListProxies()
    {
        ::DBus::CallMessage call;
        call.member("ListProxies");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    void RemoveProxy(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("RemoveProxy");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void ProxyCreated(const std::string& argin0) = 0;
    virtual void ProxyRemoved(const std::string& argin0) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ProxyCreated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ProxyCreated(arg0);
    }
    void _ProxyRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ProxyRemoved(arg0);
    }
};

} } 
namespace org {
namespace bluez {

class NetworkPeer_proxy
: public ::DBus::InterfaceProxy
{
public:

    NetworkPeer_proxy()
    : ::DBus::InterfaceProxy("org.bluez.NetworkPeer")
    {
        connect_signal(NetworkPeer_proxy, PropertyChanged, _PropertyChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void SetProperty(const std::string& argin0, const ::DBus::Variant& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("SetProperty");
        ::DBus::Message ret = invoke_method (call);
    }

    std::map< std::string, ::DBus::Variant > GetProperties()
    {
        ::DBus::CallMessage call;
        call.member("GetProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void PropertyChanged(const std::string& argin0, const ::DBus::Variant& argin1) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ::DBus::Variant arg1;
        ri >> arg1;
        PropertyChanged(arg0, arg1);
    }
};

} } 
namespace org {
namespace bluez {

class NetworkHub_proxy
: public ::DBus::InterfaceProxy
{
public:

    NetworkHub_proxy()
    : ::DBus::InterfaceProxy("org.bluez.NetworkHub")
    {
        connect_signal(NetworkHub_proxy, PropertyChanged, _PropertyChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void SetProperty(const std::string& argin0, const ::DBus::Variant& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("SetProperty");
        ::DBus::Message ret = invoke_method (call);
    }

    std::map< std::string, ::DBus::Variant > GetProperties()
    {
        ::DBus::CallMessage call;
        call.member("GetProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void PropertyChanged(const std::string& argin0, const ::DBus::Variant& argin1) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ::DBus::Variant arg1;
        ri >> arg1;
        PropertyChanged(arg0, arg1);
    }
};

} } 
namespace org {
namespace bluez {

class NetworkRouter_proxy
: public ::DBus::InterfaceProxy
{
public:

    NetworkRouter_proxy()
    : ::DBus::InterfaceProxy("org.bluez.NetworkRouter")
    {
        connect_signal(NetworkRouter_proxy, PropertyChanged, _PropertyChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void SetProperty(const std::string& argin0, const ::DBus::Variant& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("SetProperty");
        ::DBus::Message ret = invoke_method (call);
    }

    std::map< std::string, ::DBus::Variant > GetProperties()
    {
        ::DBus::CallMessage call;
        call.member("GetProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void PropertyChanged(const std::string& argin0, const ::DBus::Variant& argin1) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        ::DBus::Variant arg1;
        ri >> arg1;
        PropertyChanged(arg0, arg1);
    }
};

} } 
#endif //__dbusxx__all_h__PROXY_MARSHAL_H
