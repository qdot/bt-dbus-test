
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__manager_h__PROXY_MARSHAL_H
#define __dbusxx__manager_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace bluez {

class ManagerProxy
: public ::DBus::InterfaceProxy
{
public:

    ManagerProxy()
    : ::DBus::InterfaceProxy("org.bluez.Manager")
    {
        connect_signal(ManagerProxy, AdapterAdded, _AdapterAdded_stub);
        connect_signal(ManagerProxy, AdapterRemoved, _AdapterRemoved_stub);
        connect_signal(ManagerProxy, DefaultAdapterChanged, _DefaultAdapterChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Path DefaultAdapter()
    {
        ::DBus::CallMessage call;
        call.member("DefaultAdapter");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path FindAdapter(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("FindAdapter");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Path > ListAdapters()
    {
        ::DBus::CallMessage call;
        call.member("ListAdapters");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Path > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void AdapterAdded(const ::DBus::Path& argin0) = 0;
    virtual void AdapterRemoved(const ::DBus::Path& argin0) = 0;
    virtual void DefaultAdapterChanged(const ::DBus::Path& argin0) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _AdapterAdded_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path arg0;
        ri >> arg0;
        AdapterAdded(arg0);
    }
    void _AdapterRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path arg0;
        ri >> arg0;
        AdapterRemoved(arg0);
    }
    void _DefaultAdapterChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Path arg0;
        ri >> arg0;
        DefaultAdapterChanged(arg0);
    }
};

} } 
#endif //__dbusxx__manager_h__PROXY_MARSHAL_H
